// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using ElevatorAppData.Models;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace ElevatorAppData.Models
{
    public partial class ElevatorSystemContext
    {
        private IElevatorSystemContextProcedures _procedures;

        public virtual IElevatorSystemContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new ElevatorSystemContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IElevatorSystemContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<spElevatorRequestResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spGetAvailableElevatorsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spUpdateElevatorStateResult>().HasNoKey().ToView(null);
        }
    }

    public partial class ElevatorSystemContextProcedures : IElevatorSystemContextProcedures
    {
        private readonly ElevatorSystemContext _context;

        public ElevatorSystemContextProcedures(ElevatorSystemContext context)
        {
            _context = context;
        }

        public virtual async Task<List<spElevatorRequestResult>> spElevatorRequestAsync(int? CurrentFloor, int? RequestedFloor, string BuildingName, string ElevatorName, int? DirectionCd, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CurrentFloor",
                    Value = CurrentFloor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "RequestedFloor",
                    Value = RequestedFloor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "BuildingName",
                    Size = 50,
                    Value = BuildingName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ElevatorName",
                    Size = 50,
                    Value = ElevatorName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DirectionCd",
                    Value = DirectionCd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spElevatorRequestResult>("EXEC @returnValue = [elevatorpr].[spElevatorRequest] @CurrentFloor = @CurrentFloor, @RequestedFloor = @RequestedFloor, @BuildingName = @BuildingName, @ElevatorName = @ElevatorName, @DirectionCd = @DirectionCd", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spGetAvailableElevatorsResult>> spGetAvailableElevatorsAsync(int? CurrentFloor, string BuildingName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CurrentFloor",
                    Value = CurrentFloor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "BuildingName",
                    Size = 50,
                    Value = BuildingName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spGetAvailableElevatorsResult>("EXEC @returnValue = [elevatorpr].[spGetAvailableElevators] @CurrentFloor = @CurrentFloor, @BuildingName = @BuildingName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spUpdateElevatorStateResult>> spUpdateElevatorStateAsync(string ElevatorName, int? DirectionCd, int? CurrentFloor, string Status, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ElevatorName",
                    Size = 50,
                    Value = ElevatorName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DirectionCd",
                    Value = DirectionCd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CurrentFloor",
                    Value = CurrentFloor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Status",
                    Size = 20,
                    Value = Status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spUpdateElevatorStateResult>("EXEC @returnValue = [elevatorpr].[spUpdateElevatorState] @ElevatorName = @ElevatorName, @DirectionCd = @DirectionCd, @CurrentFloor = @CurrentFloor, @Status = @Status", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
